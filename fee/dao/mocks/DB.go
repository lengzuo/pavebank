// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "encore.app/fee/model"

	time "time"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// AddLineItem provides a mock function with given fields: ctx, billID, currency, amount, metadata, uid
func (_m *DB) AddLineItem(ctx context.Context, billID string, currency string, amount int64, metadata *model.LineItemMetadata, uid string) error {
	ret := _m.Called(ctx, billID, currency, amount, metadata, uid)

	if len(ret) == 0 {
		panic("no return value specified for AddLineItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, *model.LineItemMetadata, string) error); ok {
		r0 = rf(ctx, billID, currency, amount, metadata, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CloseBill provides a mock function with given fields: ctx, billID, metadata
func (_m *DB) CloseBill(ctx context.Context, billID string, metadata model.BillMetadata) error {
	ret := _m.Called(ctx, billID, metadata)

	if len(ret) == 0 {
		panic("no return value specified for CloseBill")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.BillMetadata) error); ok {
		r0 = rf(ctx, billID, metadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateBill provides a mock function with given fields: ctx, billID, policyType
func (_m *DB) CreateBill(ctx context.Context, billID string, policyType string) error {
	ret := _m.Called(ctx, billID, policyType)

	if len(ret) == 0 {
		panic("no return value specified for CreateBill")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, billID, policyType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBill provides a mock function with given fields: ctx, billID
func (_m *DB) GetBill(ctx context.Context, billID string) (*model.BillDetail, error) {
	ret := _m.Called(ctx, billID)

	if len(ret) == 0 {
		panic("no return value specified for GetBill")
	}

	var r0 *model.BillDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.BillDetail, error)); ok {
		return rf(ctx, billID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.BillDetail); ok {
		r0 = rf(ctx, billID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BillDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, billID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBillIDs provides a mock function with given fields: ctx, status, policyType, limit, cursor
func (_m *DB) GetBillIDs(ctx context.Context, status model.BillStatus, policyType model.PolicyType, limit int, cursor time.Time) ([]string, bool, error) {
	ret := _m.Called(ctx, status, policyType, limit, cursor)

	if len(ret) == 0 {
		panic("no return value specified for GetBillIDs")
	}

	var r0 []string
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, model.BillStatus, model.PolicyType, int, time.Time) ([]string, bool, error)); ok {
		return rf(ctx, status, policyType, limit, cursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.BillStatus, model.PolicyType, int, time.Time) []string); ok {
		r0 = rf(ctx, status, policyType, limit, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.BillStatus, model.PolicyType, int, time.Time) bool); ok {
		r1 = rf(ctx, status, policyType, limit, cursor)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, model.BillStatus, model.PolicyType, int, time.Time) error); ok {
		r2 = rf(ctx, status, policyType, limit, cursor)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetBillStatus provides a mock function with given fields: ctx, billID
func (_m *DB) GetBillStatus(ctx context.Context, billID string) (model.BillStatus, error) {
	ret := _m.Called(ctx, billID)

	if len(ret) == 0 {
		panic("no return value specified for GetBillStatus")
	}

	var r0 model.BillStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.BillStatus, error)); ok {
		return rf(ctx, billID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.BillStatus); ok {
		r0 = rf(ctx, billID)
	} else {
		r0 = ret.Get(0).(model.BillStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, billID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBills provides a mock function with given fields: ctx, status, limit, cursor
func (_m *DB) GetBills(ctx context.Context, status model.BillStatus, limit int, cursor time.Time) ([]*model.BillDetail, bool, error) {
	ret := _m.Called(ctx, status, limit, cursor)

	if len(ret) == 0 {
		panic("no return value specified for GetBills")
	}

	var r0 []*model.BillDetail
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, model.BillStatus, int, time.Time) ([]*model.BillDetail, bool, error)); ok {
		return rf(ctx, status, limit, cursor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.BillStatus, int, time.Time) []*model.BillDetail); ok {
		r0 = rf(ctx, status, limit, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.BillDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.BillStatus, int, time.Time) bool); ok {
		r1 = rf(ctx, status, limit, cursor)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, model.BillStatus, int, time.Time) error); ok {
		r2 = rf(ctx, status, limit, cursor)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetLineItemsForBill provides a mock function with given fields: ctx, billID
func (_m *DB) GetLineItemsForBill(ctx context.Context, billID string) ([]model.LineItemSummary, error) {
	ret := _m.Called(ctx, billID)

	if len(ret) == 0 {
		panic("no return value specified for GetLineItemsForBill")
	}

	var r0 []model.LineItemSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.LineItemSummary, error)); ok {
		return rf(ctx, billID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.LineItemSummary); ok {
		r0 = rf(ctx, billID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.LineItemSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, billID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertLineItem provides a mock function with given fields: ctx, billID, currency, amount, metadata
func (_m *DB) InsertLineItem(ctx context.Context, billID string, currency string, amount int64, metadata *model.LineItemMetadata) error {
	ret := _m.Called(ctx, billID, currency, amount, metadata)

	if len(ret) == 0 {
		panic("no return value specified for InsertLineItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, *model.LineItemMetadata) error); ok {
		r0 = rf(ctx, billID, currency, amount, metadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBillTotal provides a mock function with given fields: ctx, billID, currency, amount
func (_m *DB) UpdateBillTotal(ctx context.Context, billID string, currency string, amount int64) error {
	ret := _m.Called(ctx, billID, currency, amount)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBillTotal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) error); ok {
		r0 = rf(ctx, billID, currency, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDB creates a new instance of DB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *DB {
	mock := &DB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
